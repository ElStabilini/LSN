	//perchè non posso usare la funzione: perchè non ho un vettore dei dati da utilizzare
	
		betas.push_back(betamin + k*dbeta); // Aggiorno la temperatura
    double beta = betas.at(k);
    delta_ann = 1./sqrt(beta);
    
		//ciclo all'interno del blocco a temperartura fissata
		for(int j=0; j<L; j++){
			
			cout << "j = " << j << endl;
      double H = Evol(rnd, beta); //NB: evol fa cambiare i valori dei due parametri
      //aggiorno i valori medi delle grandezze 
      sum_H += H;
      sum_mu += mu;
      sum_sigma += sigma;
    }
      
      
      //NUOVA FUNZIONE DI PROVA
      
			Blocco(sum_H, int L, aveSA, aveSA2);
			Blocco(sum_mu, int L, ave_mu, ave2_mu);
			Blocco(sum_sigma, int L, ave_sigma, ave2_sigma);
      
   
    //stime singolo blocco
    errSA.push_back( sqrt(aveSA2.at(k) - pow(aveSA.at(k), 2)) ); //dev std H a temp. costante
    err = errSA.at(k);
    err_mu.push_back( sqrt(ave2_mu.at(k) - pow(ave_mu.at(k), 2)) ); 
		err_sigma.push_back( sqrt(ave2_sigma.at(k) - pow(ave_sigma.at(k), 2)) );
    

	Progressione(aveSA, aveSA2, sumSA_prog, sumSA2_prog, errSA_prog);
	Progressione(ave_mu, ave2_mu, sum_mu_prog, sum2_mu_prog, err_mu_prog);
	Progressione(ave_sigma, ave2_sigma, sum_sigma_prog, sum2_sigma_prog, err_sigma_prog);

	
    	sumSA_prog.push_back(0);
    	sumSA2_prog.push_back(0);
    	
    	sum_mu_prog.push_back(0);
    	sum2_mu_prog.push_back(0);
    	
    	sum_sigma_prog.push_back(0);
    	sum2_sigma_prog.push_back(0);
			
			for(int j=0; j<i+1; j++) {
    		sumSA_prog.at(i) += aveSA.at(j);
    		sumSA2_prog.at(i) += aveSA2.at(j);
    	
    		sum_mu_prog.at(i) += ave_mu.at(j);
    		sum2_mu_prog.at(i) += ave2_mu.at(j);
    		    		
    		sum_sigma_prog.at(i) += ave_sigma.at(j);
    		sum2_sigma_prog.at(i) += ave2_sigma.at(j);
    	}
    
  
    sumSA_prog.at(i) /= (i+1); //Cumulative average
    sumSA2_prog.at(i) /= (i+1); //Cumulative square average
    errSA_prog.push_back( error(sumSA_prog, sumSA2_prog, i) );
    
    sum_mu_prog.at(i) /= (i+1); //Cumulative average
    sum2_mu_prog.at(i) /= (i+1); //Cumulative square average
    err_mu_prog.push_back( error(sumSA_prog, sumSA2_prog, i) );
    
    sum_sigma_prog.at(i) /= (i+1); //Cumulative average
    sum2_sigma_prog.at(i) /= (i+1); //Cumulative square average
    err_sigma_prog.push_back( error(sum_sigma_prog, sum2_sigma_prog, i) );	
 		}
		
		k++;	
		cout << "==============================================================" << k << endl;
		cout << endl;
		
		if(iter==50) { //inserire controllo su iterazioni
			cout << "unable to find result with precision " << PREC << endl;
			break;
		}
		
	}
