/**********************************************************************************************

ELISA STABILINI - 942529

DEFINIZIONE ELEMENTI NECESSARI ALLA CREAZIONE DI UN ALGORITMO GENETICO

**********************************************************************************************/

#ifndef _GEN_
#define _GEN_

#include <iostream>
#include <string>
#include <vector>
#include <cstdio>
#include "random.h"

using namespace std;

class popolazione;
class percorso;
class individuo;
struct posizione;

/*========================================		OGGETTI SPECIFICI		=============================================*/

class percorso{

	public:
	
		percorso(Random* rnd, int npos); //costruttore
		percorso(Random* rnd, vector<posizione> el_pos); //costruttore
		~percorso(); //distruttore
	
		//double getNumber() const;
		//distribuiscon le città sul piano con eventuali vincoli
		void CRF (double r); //distribuisce le città su di una circonferenza di raggio
		void quadrato (double l); //distribuisce le città in un quadrato di lato l
		double distance(int index1, int index2) const; //misura la distanza tra due punti del cammino
		void stampa(string nome_file) const;
		void schermo() const;

	private:
		int m_npos; //numero di città che devo visitare
		Random* m_rnd;
		vector<posizione> m_pos; //questo vettore ha m_po elementi
};

//contiene le coordinate della posizione
struct posizione{
	double x;
	double y;
};


/*===================================== ALGORITMI GENETICI ===============================================*/

/*---------------- INDIVIDUO --------------------

1. L'individuo possiede un DNA. 
2. Il DNA contiene solo l'ORDINE con cui vengono visitate le città (è quindi un vettore di interi in ogni caso: contiene l'informazione su come sono disposti degli elementi).
3. Ho una classe seprata per gli elementi che devo ordinare
4. La misurazione del FIT avviene unendo l'informazione contenuta nella CLASSE ELEMENTO e quella contenuta nella CLASSE INDIVIDUO.
6. FIT rimane comunque un metodo dell'individuo.
7. Ho una popolazione solo per migliorare la variabilità genetica.
8. Il risultato finale sarà fornito dal migliore individuo dell'ultima popolazione

NOTA1: tutte le città vengono visitate una e una sola volta? controllare che tutti i numeri compaiano una e una sola volta all'interno del vettore DNA.
NOTA2: ricordarsi di aggiungere la condizione che alla fine il saleman torni alla posizione iniziale

---------------------------------------------*/

class individuo {

	public:
	
		individuo(Random* rnd, int lunghezza_DNA); //costruttore standard (mi restituisce un individuo con gli elementi in ordine crescente
		individuo(Random* rnd, vector<int> DNA); //costruttore con patrimonio
		~individuo(); //distruttore
		
		Random* getRND() const;
		vector<int> getDNA() const;
		int getLunghezza() const;
		int getGene(int index) const;
		vector<int> getGenes (int index1, int index2) const;
		double getFit() const;
		
		void setGene(int gene, int indice);
		void setAll(vector<double> geni);
		
		void operator= (individuo i);
		
		void permutazione(int npermutazioni);
		void permutazione(int ext1, int ext2); //permutazione con estremi
		void mutazione1();
		void mutazione2(); //da implementare
		void mutazione3();
		void shift();
		void vincoli(); //controlla che siano soddisfatti i vincoli (il percorso si chiude
		void fit(percorso* p);

		void schermo() const;
		void stampa(string filename) const;
		
		
	private:
		
		int m_lunghezza_DNA; //numero di geni da cui è costituito il cormosoma
		double m_fit; //parametro che dipende dal valore della funzione costo
		Random* m_rnd; //controlla che qui non serva una reference
		vector<int> m_DNA; 
		//il vettore sopra è il vero e proprio cormosoma costituito da una serie di geni disposti secondo una determinata sequenza
		
};

/*----------------------- POPOLAZIONE -------------------------------------*/

class popolazione {

	public:
		//inserire percorso tra argomenti di inizializzazione
		popolazione(Random* rnd, percorso* p, int lunghezza_DNA, vector<individuo> pop, int nindividui, double selettivita, double mutabilita); //costruttore
		popolazione(Random* rnd, percorso* p, int lunghezza_DNA, int nindividui, double selettivita, double mutabilita);
		~popolazione(); //distruttore
		
		individuo getInd(int index) const;
		double getMedia() const;
		double getStdev() const;
		double getBest() const;
		double getLunghezza() const;
		double getNindividui() const;
		double getSelect() const;
		double getMut() const;
		
		void generaPop();
		void eraseInd(int index);
		void checkInd() const; //controllo che gli individui abbiano DNA con stessa lunghezza
		
		void order(); //ordino gli individui della popolazione per efficienza;
		void NewGen(int nrep); //sostituisce la generazione attuale con una nuova
		void sostituisci(individuo nuovo); 		
		individuo riproduzione(int parent1, int parent2); //da implementare

		void statistica(); //statistica per progressione algoritmo
		void schermo() const; //stampo a schermo la popolazione

	private:
	
		double m_mutabilita, m_selettivita;
		double m_media, m_best, m_stdev;
		int m_nindividui; //numero di individui 
		int m_ngen; //indice di generazione PARTE DA 0
		int m_lunghezza_DNA;
		vector<individuo> m_pop;
		Random* m_rnd;
		percorso* m_p;
};


#endif
