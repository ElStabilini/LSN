#include <iostream>
#include <fstream>
#include <ostream>
#include <cmath>
#include <iomanip>
#include <vector>
#include <string>
#include <algorithm>
#include "GenAlgs.h"
#include "random.h"

#define _USE_MATH_DEFINES

using namespace std;

/*========================================		OGGETTI SPECIFICI		=============================================*/

percorso::percorso(Random* rnd, int npos) {
	m_rnd = rnd;
	m_npos = npos;
};

percorso::percorso(Random* rnd, vector<posizione> el_pos) {
	m_rnd = rnd;
	m_pos = el_pos;
	m_npos = el_pos.size();
};

percorso::~percorso(){};

void percorso::CRF(double r){
	//NB per comodità assumo l'origine come centro della circonferenza
	posizione pos;
	for(int i=0; i<m_npos; i++) {
		double ang = m_rnd->Rannyu(0,2*M_PI);
		pos.x = r*cos(ang);
		pos.y = r*sin(ang);
		m_pos.push_back(pos);
	}
	
};

void percorso::quadrato(double l) {
	posizione pos;
		for(int i=0; i<m_npos; i++){
		pos.x = m_rnd->Rannyu(0,l);
		pos.y = m_rnd->Rannyu(0,l);
		m_pos.push_back(pos);
	}

};

double percorso::distance(int index1, int index2) const {
	double x1 = m_pos.at(index1).x;
	double x2 = m_pos.at(index2).x;
	double y1 = m_pos.at(index1).y;
	double y2 = m_pos.at(index2).y;
	return sqrt( pow(x1-x2,2) + pow(y1-y2,2) );
};  

void percorso::stampa(string filename) const {
	ofstream out(filename);
	
	for(int i=0; i<m_npos; i++)
		out << i << ", " << m_pos.at(i).x << ", " << m_pos.at(i).y << endl;
	
	out.close();
};

void percorso::schermo() const {
	for(int i=0; i<m_npos; i++)
		cout << "x: " << m_pos.at(i).x << ", y: " << m_pos.at(i).y << endl;
}

/*===================================== ALGORITMI GENETICI ===============================================*/

/*---------------- INDIVIDUO --------------------*/

individuo::individuo(Random* rnd, int lunghezza_DNA) {
	m_lunghezza_DNA = lunghezza_DNA; //il vettore m_DNA è un vettore di un numero dim di zeri
	m_rnd = rnd;
	for(int i=0; i<m_lunghezza_DNA; i++)
		m_DNA.push_back(i);
		//NB: in questo modo gli indici delle città partono da 0
		//per come è creato so che questo individuo soddisfa i vincoli
};

individuo::individuo(Random* rnd, vector<int> DNA) {
	m_DNA = DNA;
	m_lunghezza_DNA = DNA.size();
	m_rnd = rnd;
};

individuo::~individuo(){};
	
int individuo::getLunghezza() const{
	return m_lunghezza_DNA;
};

int individuo::getGene(int index) const {
	return m_DNA.at(index);
}

vector<int> individuo::getDNA() const{
	return m_DNA;
};

double individuo::getFit() const {
	return m_fit;
};

Random* individuo::getRND() const {
	return m_rnd;
}

vector<int> individuo::getGenes (int index1, int index2) const {
	
	if (index1 > index2)
		swap(index1, index2);
		
	if (index1 > m_lunghezza_DNA || index2 > m_lunghezza_DNA) {
		cout << "index out of range 'lunghezza_DNA' " << endl;
		exit(1);
	}
	
	vector<int> Genes (m_DNA.begin()+index1, m_DNA.begin()+index2);
	
	return Genes;
}

void individuo::setGene(int gene, int indice) {
	if(indice > 0 && indice <= m_DNA.size())
		m_DNA.at(indice) = gene;
	else 
		cout << "indice non esitente nell'array, impossibile eseguire operazione" << endl;
};


void individuo::setAll(vector<double> geni) {
	if(m_lunghezza_DNA == geni.size()) {
		for(int i=0; i<geni.size(); i++) 
	 		m_DNA.at(i) = geni.at(i);
	} else {
		cout << "dimensioni array diverse da quelle previste, impossibile eseguire operazione" << endl; 
	}
};

void individuo::operator= (individuo i) {
	this -> m_lunghezza_DNA = i.getLunghezza();
	this -> m_fit = i.getFit();
	this -> m_rnd = i.getRND();
	this -> m_DNA = i.getDNA();	
}

void individuo::permutazione(int npermutazioni) {

	for(int i=0; i<npermutazioni; i++) {
		int x1 = 0; 
		int x2 = 0;		
	
	while(x1 == x2) {
		x1 = m_rnd->Int(0, m_lunghezza_DNA);
		x2 = m_rnd->Int(0, m_lunghezza_DNA);
	}	
		swap(m_DNA.at(x1), m_DNA.at(x2));
	}
};

void individuo::permutazione(int ext1, int ext2) {
	int delta = ext2-ext1;
	int npermutazioni = m_rnd->Int(1,delta);
	
	for(int i=0; i<npermutazioni; i++) {
		int x1 = 0;
		int x2 = 0;		
		
		while(x1 == x2) {
			x1 = m_rnd->Int(ext1, ext2);
			x2 = m_rnd->Int(ext2+1, +delta);
		}
		
		swap(m_DNA.at(x1), m_DNA.at(x2));
	}

};

void individuo::mutazione1() {
	permutazione(1);
};

void individuo::mutazione2() {
	int inizio = 0;
	int fine = 0;
	
	while (inizio == fine){
		inizio = m_rnd->Int(0, m_lunghezza_DNA/2);
		fine = m_rnd->Int(0, m_lunghezza_DNA/2);
	}
	
	if (inizio > fine)
		swap(inizio, fine);

	permutazione(inizio, fine);

};

void individuo::mutazione3() {
	int inizio = 0;
	int fine = 0;
	
	while (inizio == fine){
		inizio = m_rnd->Int(0, m_lunghezza_DNA);
		fine = m_rnd->Int(0, m_lunghezza_DNA);
	}
		
	if (inizio > fine)
		swap(inizio, fine);
	
	int i=0;
		
	if(fine-inizio%2 == 0) { //pari
		while( fine != inizio ) {
			swap(m_DNA[inizio], m_DNA[fine]);
			inizio += 1;
			fine -= 1;
		}
		
	} else { //dispari	
			while( inizio+1 != fine){
				swap(m_DNA[inizio], m_DNA[fine]);
				inizio += 1;
				fine -= 1;
			}
	} 

};

void individuo::shift() {
	int primo = 0;
	int ultimo = 0;
	
	while (primo == ultimo){
		primo = m_rnd->Rannyu(0, m_lunghezza_DNA);
		ultimo = m_rnd->Rannyu(0, m_lunghezza_DNA);
	}
	
	if (primo > ultimo){
		swap(primo,ultimo);
	}
	
	vector<int> shifting (m_DNA.begin()+primo, m_DNA.begin()+ultimo+1);
	reverse(shifting.begin(), shifting.end()); 
	m_DNA.erase (m_DNA.begin()+primo, m_DNA.begin()+ultimo+1);
	m_DNA.insert(m_DNA.begin()+primo, shifting.begin(), shifting.end());
	
};

void individuo::vincoli() {
	//sposto la prima città all'inizio
	auto it = find(m_DNA.begin(), m_DNA.end(), 0);
	vector<int> cut(it, m_DNA.end());
	m_DNA.erase(it, m_DNA.end());
	m_DNA.insert(m_DNA.begin(), cut.begin(), cut.end()); //inserisco all'inizio di m_DNA il vettore cut
	//fare un controllo di questa funzionew
};

void individuo::fit(percorso* p) {
	double fitness;
	for(int i=0; i<m_lunghezza_DNA-1; i++) 
		fitness += p->distance( m_DNA.at(i), m_DNA.at(i+1) );
	
	m_fit = fitness;
};

void individuo::schermo() const {
	for(int i=0; i<m_lunghezza_DNA; i++)
		cout << m_DNA.at(i) << " \t";

	cout << " →  " << m_lunghezza_DNA << endl;
	return;
}

void individuo::stampa(string filename) const {
	ofstream out(filename);
	
	for(int i=0; i<m_lunghezza_DNA; i++) 
		out << i << ", " << m_DNA.at(i) << endl;
		
	out.close();
}

/*------------------------------------ POPOLAZIONE -------------------------------------*/


popolazione::popolazione(Random* rnd, percorso* p, int lunghezza_DNA, vector<individuo> pop, int nindividui, double selettivita, double mutabilita) {
	
	m_p = p;
	m_nindividui = nindividui;
	m_lunghezza_DNA = lunghezza_DNA;
	
	if(nindividui > pop.size()) {
		cout << "popolazione troppo piccola, il numero di individui verrà ridotto a " << pop.size() << endl;
		m_nindividui = pop.size();
	} else if (nindividui < pop.size() ) {
		cout << "popolazione troppo numerosa, alcuni individui verranno eliminati " << endl;
		m_pop = pop;
		while(m_nindividui != pop.size()) {
				int index = rnd->Int(0, m_pop.size());
				this -> eraseInd(index);
		}
  } else {
		m_pop = pop;
	}
	
	
	this -> checkInd();
	if( lunghezza_DNA != m_pop.at(0).getLunghezza() )
		cout << "lunghezza DNA incorretta; la lunghezza utilizzata sarà " << m_pop.at(0).getLunghezza() << endl;
	m_lunghezza_DNA = lunghezza_DNA;		
	

	m_rnd = rnd;
	m_ngen = 0;
	m_selettivita = selettivita;
	m_mutabilita = mutabilita;
};

popolazione::popolazione( Random* rnd, percorso* p, int lunghezza_DNA, int nindividui, double selettivita, double mutabilita) {
	m_rnd = rnd;
	m_p = p;
	m_lunghezza_DNA = lunghezza_DNA;
	m_nindividui = nindividui;
	m_ngen = 0;
	m_selettivita = selettivita;
	m_mutabilita = mutabilita;
	vector<individuo> m_pop;
}

popolazione::~popolazione(){};


void popolazione::generaPop() {
	
	individuo primo(m_rnd, m_lunghezza_DNA);
	cout << "lunghezza DNA" << primo.getLunghezza() << endl;
	primo.fit(m_p);
	m_pop.push_back(primo);
	
	for(int i=1; i<m_nindividui; i++){
		//cout << "inizio ciclo" << endl;
		primo.permutazione(m_lunghezza_DNA);
		primo.vincoli();
		primo.fit(m_p);
		m_pop.push_back(primo);	
		cout << i << endl;
	}
	order();
	
};

void popolazione::eraseInd(int index) {

	vector<individuo> pop;
	for(int i=0; i<m_pop.size(); i++) {
		if(i==index)
			i++;
		individuo tmp(m_pop.at(i).getRND(), m_pop.at(i).getDNA());
		pop.push_back(tmp);
	}
	
	m_pop = pop;
}

void popolazione::checkInd() const {
	for(int i=0; i<m_pop.size()-1; i++) {
		if( m_pop.at(i).getLunghezza() != m_pop.at(i+1).getLunghezza() ) {
			cout << "individui non adatti a costituire una popolazione, controllare l'informazione genetica" << endl;	
		exit(1);
		}
	}
};

individuo popolazione::getInd(int index) const {
	return m_pop.at(index);
};

double popolazione::getMedia() const {
	return m_media;
};

double popolazione::getStdev() const {
	return m_stdev;
};

double popolazione::getBest() const {
	return m_best;
};

double popolazione::getLunghezza() const {
	return m_lunghezza_DNA;
};

double popolazione::getNindividui() const {
	return m_nindividui;
};

double popolazione::getSelect() const {
	return m_selettivita;
};

double popolazione::getMut() const {
	return m_mutabilita;
};

void popolazione::order() {
	
	for(int i=0; i<m_pop.size(); i++){
		for(int j=i+1; j<m_pop.size(); j++) {
			if( m_pop.at(j).getFit() < m_pop.at(i).getFit() )
				swap(m_pop.at(i), m_pop.at(j));			
		}
	}

};

//se estraggo 19, per cambiarli dal 19 in avanti devo fare 13 cicli

individuo popolazione::riproduzione(int parent1, int parent2) {

	int index = m_rnd->Int(0, m_lunghezza_DNA);
	cout << m_lunghezza_DNA-index << endl;
	
	for(int i=0; i<(m_lunghezza_DNA-index); i++) {
		cout << "ciclo: " << i << ", index+i = " << index+i << " , limite i:" << m_lunghezza_DNA-index << endl;
		int copy = m_pop.at(parent1).getGene(index+i);
		m_pop.at(parent1).setGene(m_pop.at(parent2).getGene(index+i), index+i);
		m_pop.at(parent2).setGene(copy, index+i);
		//cout << "hi" << endl;
	}

 cout << "sono uscito! " << endl;
};


void popolazione::sostituisci(individuo nuovo){
	
	int x = m_rnd->Int(ceil(m_nindividui/2),m_nindividui-1);	//sostituisce un individuo della metà meno efficiente della popolazione
	m_pop.at(x) = nuovo;
	
	return;
}

//NB INSERISCI UNA STAMPA DEI RISULTATI A UN CERTO PUNTO
void popolazione::NewGen(int nrep) {
	
	order(); //ordino la popoplazione per efficienza

	for(int i=0; i<nrep; i++) {
		int parent1 = 0;
		int parent2 = 0;
		
		while(parent1 == parent2) {
			cout << endl;
			parent1 = int(ceil(m_nindividui * pow(m_rnd->Rannyu(), m_selettivita)))-1;
			parent2 = int(ceil(m_nindividui * pow(m_rnd->Rannyu(), m_selettivita)))-1;
		}
		
		individuo figlio = riproduzione(parent1, parent2);
		cout << "ho assegnato" << endl;
		/*figlio.schermo();
		
		if (m_rnd->Rannyu() < m_mutabilita){
			
			switch (m_rnd->Int(1,4)){
				case 1: figlio.mutazione1();
				break;
				case 2: figlio.shift();
				break;
				case 3: figlio.mutazione2();
				break;
				case 4: figlio.mutazione3();
				break;
			}
		}
		
		figlio.vincoli();
		figlio.fit(m_p);
		sostituisci(figlio);*/
	}
	order();
	m_ngen++;
};

void popolazione::statistica() {
	
	order();
	
	double half = 0;
	double sum = 0;
	double sum2 = 0;
	
	for(int i=0; i<m_nindividui; i++){
		sum += m_pop.at(i).getLunghezza();
		sum2 += pow(m_pop.at(i).getLunghezza(),2);
		if(i== int(m_nindividui/2))
			half = sum;
	}
	
	m_media = half / double(int(m_nindividui/2));
	m_best = m_pop.at(0).getLunghezza();
	m_stdev = sqrt(sum2/double(m_nindividui) - pow(sum/double(m_nindividui),2) );
};

void popolazione::schermo() const {
	cout << "***** POPOLAZIONE *****" << endl;
	for(int i=0; i<m_nindividui; i++){
		m_pop.at(i).schermo();
	}
	cout << "-------------------------------------------" << endl;
};


